# DESIGN

Based on discussions from 

* <http://groups.google.com/group/slurm-devel/browse_frm/thread/1c8805fb274c108f#>
* <http://groups.google.com/group/slurm-devel/browse_thread/thread/b06f3985cc7504b2?tvc=2>

# Requirements

This documentation assumes the user knows basic slurm administration.

Slurmdbd must be configured and working, account enforcing is enabled
in *slurm.conf*

    AccountingStorageEnforce=limits

The following parameters must also be set, we do not want a decay or
reset of the usage that is recorded in slurmdbd.

    PriorityDecayHalfLife=0
    PriorityUsageResetPeriod=NONE

What is also required is a pretty good estimate of the total available
cpu hours that you have on your cluster that you can allocate to
accounts.

Users will need to learn how to use accounts (nothing new here).

sacctmgr and sshare is required and must be working.

# How it works

Time is deposited to an account, which gets drawn from whenever a job
is submitted to the cluster. Currently the "GrpCPUMins" is used.

Note that there is no concept of 'Reserved' time, like Gold does. This 
is probably a good thing - as the Gold way of doing it sometimes leads
to Reserved time getting stuck, and never released. The Slurm way seems
to only subtract time when the jobs are actually running.

A consequence of this is that it will kill jobs mid-run (say if another
user in the Account uses up all the time first) - again, probably not
a bad thing.

## Time period

The tools work with hours as the time unit (conversions are done where
needed).

## The slurmdbd hierachy

We assume this type of setup, which is the default behaviour of the
slurmdbd. (This is our current assumption to keep things simple)

* root 20N hours available
  * account1 with 1N hours
  * account2 with 1N hours
  * account3 with 2N hours
  * account4 with 2N hours

There is effectively no hierachy at all, we could do something like this...

* root with 20U of time
  * CLASS-A with 1U time
     * account1
     * account2
  * CLASS-B with 0.5U time
     * account3
  * CLASS-C with 0.25U time
     * account4

We would have to add some checks or script up the [[sbank-project]]
wrapper to work in a pre-defined way to allow for the different
workflows.

## Note

It *seems* that the slurmctld must be restarted sometimes - for new
Accounts or Account updates. This needs to be checked more (it may not
be the case).

# Missing components

* Helper script to add/remove hours from a given account (short of
  manually doing it by hand and doing the sums). (This is somewhat
  done as [[sbank-deposit]])
* And to add/remove users from an Account. (see below with gchproject
  idea).
* Ability to *end* accounts at a given date, could associate accounts
  with overlapping reservations. We tried this but we can't set a
  *maint* reservation that is honoured by slurm. So this is a no go
  for now. One idea is to do it with an external database and some
  helper scripts (done via crontab or something similar).
    * Note that setting GrpCPUMins to 0 can be used to do this - to put
      an end on the account.  
    * One idea is to do this offline with an external database and a
      handful of scripts.
* This was mainly conceived as a Gold (bank) replacement, if we ditch maui,
  what other functionality will users miss? Have a 'showq' and 'checkjob'
  wrapper?
* some additional commands/wrapper scripts to mimic GOLD
 * wrapper script for creating accounts (gmkproject like command),
   default behaviour should create accounts associated with a default
   root account and allow the user to define a parent account if
   necessary. Need to define how projects should be created deleted,
   do you want a structure/hierachy in the accounting db?
   [[sbank-project]]
 * wrapper script for adding/deleting users from (gchproject like
   command) [[sbank-user]] or [[sbank-project]]
 * wrapper script for making users (gmkuser), do we need to create
   users in slurmdbd before associating users with
   projects/accounts. [[sbank-user]]

# TODO for the script

* Re-write using Slurm-Perl API
* A bunch of basic tests

# Ideas

* Feedback for user, e.g. on submission estimate how many hours are
  needed then print a number of hours that is in the balance before and
  after the job has run. Maybe add this in the form of *sbank balance
  request --nodes N --cores C --time hours --account ACCOUNT*
* the balance request commands - it would be nice if they could use 'sbank
  cluster' to find the local cluster, if -c is not specified
* similarly, it would be nice to add a command to 'sbank user' to list the
  current user's default account on the cluster. I noticed that people might
  leave out the account name in their job script, and so slurm will just
  use their default one.
* for 'sbalance request', I'd prefer it it printed out something like the
  following, instead of just the expected balance:

    Current balance     = nnn
    Requested CPU hours = nnn
    Expected balance    = nnn

  I think that would be more explicit, rather than just printing the final
  expected balance.
* I'd like 'user list' to maybe default to the current user, on the local
  cluster, and print their default account ? Not sure if the current behaviour
  of showing all users is the best. It could be specified with '-a' or something
* I was wondering about having some kind of a sanity check in 'sbank' for
  seeing if commands like 'sacctmgr' are actually there? I know the spec
  file should take care of it when it's an rpm, so I don't know if this is
  needed or not..

# Tested on

* SLURM 2.2.0
* SL5x (and system version of perl/sh)
