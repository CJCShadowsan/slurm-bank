usage() 
{
	echo "usage: sbank balance statement [flags] args"
	echo "    -c display per cluster 'clustername' (defaults to the local cluster)"
	echo "    -a display per account 'accountname' (defaults to all accounts of the current user; implies '
-u')"
	echo "    -u show all users in the account (defaults to just the current user)"
	echo "    -A display all accounts (defaults to all accounts of the current user; implies '-u')"
}

parse_args() {
        # parse options
        FLAGS "$@" || exit $?
        eval set -- "${FLAGS_ARGV}"
}

cmd_default()
{
	statement "$@"
}

cmd_statement()
{
	local opts

	# define some variables
	debug "define some variables"
	DEFINE_string 'account' '' 'specify a slurm account' 'a'
	DEFINE_string 'cluster' '' 'specify a cluster' 'c'
	DEFINE_string 'user' '' 'specify a user' 'u'
	DEFINE_boolean 'all' false 'show all users in the account' 'A'

	FLAGS_PARENT="sbank balance"

	# parse the command line
	debug "parse command line"
	parse_args "$@"

	# change behaviour of getopt to let perl program take args
	unset POSIXLY_CORRECT


	[ "${FLAGS_cluster}" != "" ]  && opts="$opts -c ${FLAGS_cluster}"
	[ "${FLAGS_account}" != "" ]  && opts="$opts -a ${FLAGS_account}"
	[ "${FLAGS_user}" != "" ]  && opts="$opts -u ${FLAGS_user}"
	[ ${FLAGS_all} -eq ${FLAGS_TRUE} ] && opts="$opts -A"

	sbalance $opts
}

cmd_request() 
{
	# define some variables
        debug "define some variables"
        #DEFINE_string 'account' '' 'specify a slurm account' 'a'
        DEFINE_integer 'nodes' '0' 'specify a total number of nodes' 'n'
        DEFINE_integer 'cores' '0' 'specify a total number of cores per node' 'c'
        DEFINE_integer 'time' '0' 'specify a total hours (Walltime)' 't'

	FLAGS_PARENT="sbank balance request"

        # parse the command line
        debug "parse command line"
        parse_args "$@"

	# get account balance and substract estimate of total cores *
	# walltime and return a value to the user

	printf "nodes=${FLAGS_nodes} "
	printf "cores=${FLAGS_cores} "
	printf "time=${FLAGS_time} "
	printf "requested=$(( ${FLAGS_nodes} * ${FLAGS_cores} * ${FLAGS_time} )) \n"

}

cmd_help()
{
	usage
	exit 0
}
